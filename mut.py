from collections import Counter
from align import Align
from Bio import SeqIO, AlignIO
import Bio.Align

class Mut(Align):
	'''
	Functions for creating mutagenic primer libraries from 
	multiple sequence alignments
	'''
	
	IUPAC = {('A',): 'A',
	('A', 'C'): 'M',
	('A', 'C', 'G'): 'V',
	('A', 'C', 'G', 'T'): 'N',
	('A', 'C', 'T'): 'H',
	('A', 'G'): 'R',
	('A', 'G', 'T'): 'D',
	('A', 'T'): 'W',
	('C',): 'C',
	('C', 'G', 'T'): 'B',
	('C', 'T'): 'Y',
	('G',): 'G',
	('G', 'C'): 'S',
	('G', 'T'): 'K',
	('T',): 'T'}

	def __init__(self,alignment,format='fasta',gaps=False):
		self.records = None
		self.load(alignment,format)
		self.column_freqs = self.column_freqs_dict(gaps)
		self.consensus = None
	
	def _column_count_gen(self,gaps=False):
		'''Generator of Counter objects for amino acids in each column'''
		assert isinstance(self.records,Bio.Align.MultipleSeqAlignment), "Must load alignment with as_seq=False"
		for i in range(len(self.records[1,:])):
			if gaps:
				yield Counter(self.records[:,i])
			else:
				yield Counter(self.records[:,i].replace('-',''))
			
	def _column_freqs_gen(self,gaps=False,as_dict=True):
		'''Generator of dictionaries of amino acid frequencies for each column'''
		for i in self._column_count_gen(gaps):
			total = float(sum(i.values()))
			if as_dict:
				yield dict(Counter({i:j/total for i,j in i.iteritems()}))
			else:	
				yield Counter({i:j/total for i,j in i.iteritems()})
						
	def column_freqs_dict(self,gaps=False):
		'''
		Return dictionary of sites mapped to dictionaries holding amino
		acid frequencies for each column
		'''
		return {i+1:j for i,j in enumerate(self._column_freqs_gen(gaps,as_dict=True))}
			
	def all_mutant_combinations(self,gaps=False,as_dict=False):
		'''Return the number of possible sequences arising from frequency vectors
		generated by column_freqs_dict'''
		return reduce(lambda x,y:x*y,
			[len(i) for i in self.column_freqs_dict(gaps,as_dict).values()])
			
	def num_single_site_mutants(self,gaps=False,as_dict=False):
		'''Return the number of possible sequences if only single sites
		are mutated acording to column freq vectors'''
		return reduce(lambda x,y:x+y,
			[len(i) for i in self.column_freqs_dict(gaps,as_dict).values()])
			
	def load_consensus(self,infile,format):
		'''Load a DNA consensus sequence'''
		self.consensus = SeqIO.read(infile,format)
		
	def _codon_gen(self,infile=None,format=None):
		if self.consensus == None:
			self.load_consensus(infile,format)
		return (str(self.consensus.seq[i:i+3]) for i in range(0,len(self.consensus),3))